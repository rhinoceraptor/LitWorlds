// Generated by CoffeeScript 1.7.1

/*
CoffeeScript shortcut:
constructor (prop) ->
	@prop = prop

is equal to:

constructor (@prop) ->
 */
var Item;

Item = (function() {
  function Item(id, title, desc, cost) {
    this.id = id;
    this.title = title;
    this.desc = desc;
    this.cost = cost;
  }

  Item.prototype.getQuantity = function(item_id) {
    var i, _i, _len, _ref;
    _ref = this.items;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.item_id === item_id) {
        return i.quantity;
      }
    }
    return false;
  };

  Item.prototype.add = function(item, quantity) {
    var cutItemLoc;
    if (this.itemExistsInBasket(item.id)) {
      cutItemLoc = this.getItemLocation(item.id);
      this.items[curItemLoc].quantity += quantity;
    } else {
      this.items.push({
        "item_id": item_id,
        "quantity": quantity
      });
      this.distinct_count++;
    }
    return this.total_count += quantity;
  };

  Item.prototype.itemExistsInBasket = function(item_id) {
    var i, _i, _len, _ref;
    _ref = this.items;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.item_id === item_id) {
        return true;
      }
    }
    return false;
  };

  Item.prototype.getItemLocation = function(item_id) {
    var count, i, _i, _len, _ref;
    count = 0;
    _ref = this.items;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.item_id === item_id) {
        return count;
      }
      count++;
    }
    return false;
  };

  return Item;

})();
