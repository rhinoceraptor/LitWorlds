// Generated by CoffeeScript 1.7.1
$(function() {
  var container, isNumber, placeInStackBox, removeLines;
  console.log('ready');
  container = {};
  container.rpnCalc = new rpnCalc();
  $("#enter").click(function() {
    var $entryBox, $stackBox;
    $entryBox = $("#entry");
    $stackBox = $("#stack");
    if ($entryBox.val() && isNumber($entryBox.val())) {
      console.log("pushing " + $entryBox.val());
      container.rpnCalc.push(parseInt($entryBox.val(), 10));
      if ($stackBox.val() !== '') {
        $stackBox.val($stackBox.val() + '\n' + $entryBox.val());
      } else {
        $stackBox.val($entryBox.val());
      }
      $entryBox.val('');
      return $stackBox.scrollTop($stackBox[0].scrollHeight - $stackBox.height());
    }
  });
  $(".number").click(function() {
    var $entryBox, oldEntry;
    $entryBox = $("#entry");
    oldEntry = $entryBox.val();
    $entryBox.val(oldEntry + this.id);
    return console.log(oldEntry + this.id);
  });
  $(".operator").click(function() {
    var result;
    if (container.rpnCalc.operationIsPossible()) {
      removeLines(2);
      switch (this.id.toString()) {
        case '+':
          result = container.rpnCalc.add();
          break;
        case '-':
          result = container.rpnCalc.sub();
          break;
        case '*':
          result = container.rpnCalc.mult();
          break;
        case '/':
          result = container.rpnCalc.div();
      }
      return placeInStackBox(result);
    }
  });
  $(".function").click(function() {
    var result;
    if (this.id.toString() !== 'clear') {
      removeLines(2);
    }
    switch (this.id.toString()) {
      case 'clear':
        removeLines(container.rpnCalc.returnIndex());
        container.rpnCalc.clr();
        break;
      case 'exp':
        result = container.rpnCalc.exp();
        break;
      case 'mod':
        result = container.rpnCalc.mod();
        break;
      case 'sqrt':
        result = container.rpnCalc.sqrt();
    }
    if (this.id.toString() !== 'clear' && result !== false) {
      return placeInStackBox(result);
    }
  });
  removeLines = function(numLines) {
    var $stackBox, stackText;
    $stackBox = $("#stack");
    stackText = $stackBox.val().split('\n');
    numLines = parseInt(container.rpnCalc.returnIndex());
    console.log("removing lines " + numLines + " to " + numLines - numLines);
    stackText.splice(numLines - numLines, numLines);
    return $stackBox.val(stackText.join('\n'));
  };
  placeInStackBox = function(num) {
    var $stackBox;
    $stackBox = $("#stack");
    console.log("num is " + num);
    if ($stackBox.val() !== '') {
      return $stackBox.val($stackBox.val() + '\n' + num);
    } else {
      return $stackBox.val(num);
    }
  };
  return isNumber = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };
});
