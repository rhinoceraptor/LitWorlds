// Generated by CoffeeScript 1.7.1
$(function() {
  var container, isNumber;
  console.log('ready');
  container = {};
  container.rpnCalc = new rpnCalc();
  $("#Enter").click(function() {
    var $entryBox, $stackBox;
    $entryBox = $("#entry");
    $stackBox = $("#stack");
    if ($entryBox.val() && isNumber($entryBox.val())) {
      console.log("pushing " + $entryBox.val());
      container.rpnCalc.push(parseInt($entryBox.val(), 10));
      if ($stackBox.val() !== '') {
        $stackBox.val($stackBox.val() + '\n' + $entryBox.val());
      } else {
        $stackBox.val($entryBox.val());
      }
      $entryBox.val('');
      return $stackBox.scrollTop($stackBox[0].scrollHeight - $stackBox.height());
    }
  });
  $(".number").click(function() {
    var $entryBox, oldEntry;
    $entryBox = $("#entry");
    oldEntry = $entryBox.val();
    $entryBox.val(oldEntry + this.id);
    return console.log(oldEntry + this.id);
  });
  $(".operator").click(function() {
    var $stackBox, numLines, result, stackText;
    if (container.rpnCalc.operationIsPossible()) {
      $stackBox = $("#stack");
      stackText = $stackBox.val().split('\n');
      numLines = parseInt(container.rpnCalc.returnIndex());
      console.log("removing lines " + numLines + " to " + numLines - 2);
      stackText.splice(numLines - 2, numLines);
      $stackBox.val(stackText.join('\n'));
      switch (this.id.toString()) {
        case '+':
          result = container.rpnCalc.add();
          break;
        case '-':
          result = container.rpnCalc.sub();
          break;
        case '*':
          result = container.rpnCalc.mult();
          break;
        case '/':
          result = container.rpnCalc.div();
      }
      console.log("result is " + result);
      if ($stackBox.val() !== '') {
        return $stackBox.val($stackBox.val() + '\n' + result);
      } else {
        return $stackBox.val(result);
      }
    }
  });
  return isNumber = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };
});


/*
1
2
3
+

1
4
+

5
 */
