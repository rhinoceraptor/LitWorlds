// Generated by CoffeeScript 1.7.1
var rpnCalc,
  __modulo = function(a, b) { return (a % b + +b) % b; };

rpnCalc = (function() {
  function rpnCalc() {
    this.stack = [];
    this.index = 0;
  }

  rpnCalc.prototype.returnIndex = function() {
    return this.index;
  };

  rpnCalc.prototype.getStackAtIndex = function(query) {
    return this.stack[query];
  };

  rpnCalc.prototype.operationIsPossible = function() {
    if (this.index > 1) {
      return true;
    } else {
      return false;
    }
  };

  rpnCalc.prototype.push = function(numToPush) {
    this.stack[this.index] = numToPush;
    return this.index++;
  };

  rpnCalc.prototype.pop = function() {
    if (this.index > 0) {
      this.index--;
      return this.stack[this.index];
    } else {
      return false;
    }
  };

  rpnCalc.prototype.add = function() {
    var numOne, numTwo, result;
    if (this.operationIsPossible()) {
      numOne = this.pop();
      numTwo = this.pop();
      result = numTwo + numOne;
      this.push(result);
      return result;
    } else {
      return false;
    }
  };

  rpnCalc.prototype.sub = function() {
    var numOne, numTwo, result;
    if (this.operationIsPossible()) {
      numOne = this.pop();
      numTwo = this.pop();
      result = numTwo - numOne;
      this.push(result);
      return result;
    } else {
      return false;
    }
  };

  rpnCalc.prototype.mult = function() {
    var numOne, numTwo, result;
    if (this.operationIsPossible()) {
      numOne = this.pop();
      numTwo = this.pop();
      result = numTwo * numOne;
      this.push(result);
      return result;
    } else {
      return false;
    }
  };

  rpnCalc.prototype.div = function() {
    var numOne, numTwo, result;
    if (this.operationIsPossible()) {
      numOne = this.pop();
      numTwo = this.pop();
      result = numTwo / numOne;
      this.push(result);
      return result;
    } else {
      return false;
    }
  };

  rpnCalc.prototype.sum = function(prevSum) {
    if (this.index > 0) {
      if (prevSum == null) {
        prevSum = 0;
      }
      return this.sum(this.pop() + prevSum);
    } else {
      if (prevSum != null) {
        return prevSum;
      } else {
        return false;
      }
    }
  };

  rpnCalc.prototype.exp = function() {
    var numOne, numTwo;
    if (this.operationIsPossible()) {
      numOne = this.pop();
      numTwo = this.pop();
      return Math.pow(numOne, numTwo);
    } else {
      return false;
    }
  };

  rpnCalc.prototype.mod = function() {
    var numOne, numTwo;
    if (this.operationIsPossible()) {
      numOne = this.pop();
      numTwo = this.pop();
      return __modulo(numOne, numTwo);
    } else {
      return false;
    }
  };

  rpnCalc.prototype.sqrt = function() {
    if (this.index > 0) {
      return Math.sqrt(this.pop());
    } else {
      return false;
    }
  };

  rpnCalc.prototype.clr = function() {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.index; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(this.pop());
    }
    return _results;
  };

  return rpnCalc;

})();
