// Generated by CoffeeScript 1.7.1
var app, auth_cookie, config, enCore_init, enCore_port, err, express, fs, get_auth, handle_session, http, io, net, node_domain, obj, scrape, server, server_name, socket_io, socket_port, telnet_port;

net = require('net');

http = require('http');

socket_io = require('socket.io');

express = require('express');

http = require('http');

fs = require('fs');

scrape = require('./scrape');

auth_cookie = require('./auth_cookie');

config = fs.readFileSync('./config.json');

try {
  obj = JSON.parse(config);
  server_name = obj.server_name;
  socket_port = obj.socket_port;
  node_domain = obj.node_domain;
  server = obj.server;
  telnet_port = obj.telnet_port;
  enCore_port = obj.enCore_port;
  enCore_init = obj.enCore_init;
  console.log('server configuration:\n---------------------');
  console.log('\tserver_name: ' + server_name);
  console.log('\tsocket_port: ' + socket_port);
  console.log('\tnode_domain: ' + node_domain);
  console.log('\tserver: ' + server);
  console.log('\ttelnet_port: ' + telnet_port);
  console.log('\tenCore_port: ' + enCore_port);
  console.log('\tenCore_init: ' + enCore_init);
} catch (_error) {
  err = _error;
  console.log('Error reading config.json!');
  process.exit(1);
}

app = express();

io = socket_io.listen(socket_port);

app.use('/', express["static"]('../client/'));

io.sockets.on('connection', (function(_this) {
  return function(io) {
    console.log('Incoming socket.io connection\n');
    return io.on('auth', function(authData) {
      return get_auth(io, authData);
    });
  };
})(this));

get_auth = (function(_this) {
  return function(io, authData) {
    var auth;
    console.log('auth ' + authData.user + ":" + authData.passwd);
    auth = new auth_cookie(server, enCore_port);
    return auth.get_access_code(authData.user, authData.passwd, function(access_code) {
      console.log('access code is ' + access_code);
      if (access_code === "failed") {
        return io.emit("auth_fail");
      } else {
        return auth.get_autologin_string(access_code, function(autologin) {
          console.log('autologin is ' + autologin);
          return handle_session(io, access_code, autologin);
        });
      }
    });
  };
})(this);

handle_session = (function(_this) {
  return function(io, access_code, autologin) {
    var s, telnet;
    telnet = net.createConnection(telnet_port, server);
    s = new scrape(server, enCore_port, node_domain);
    telnet.write(autologin + "\r\n");
    telnet.on('data', function(telnetData) {
      return io.emit('tcp_line', telnetData);
    }).on('error', function() {
      return io.emit('error');
    }).on('close', function() {
      return io.emit('disconnect');
    });
    io.on('io_line', function(socketData) {
      if (telnet != null) {
        if (telnet.writable) {
          return telnet.write(socketData + "\r\n");
        } else {
          return io.emit('error', 'timeout');
        }
      }
    }).on('error', function() {
      return console.log('Error writing to telnet!');
    });
    io.on('disconnect', function() {
      console.log('disconnect the telnet connection!\n');
      if (telnet != null) {
        telnet.destroy();
        return telnet = null;
      }
    });
    io.on('close', function() {
      console.log('close the telnet connection!\n');
      if (telnet != null) {
        telnet.destroy();
        return telnet = null;
      }
    });
    io.on('req_markup', function(ident) {
      var url;
      console.log('client requested hash URL ' + ident);
      url = "http://" + server + ":" + enCore_port + "/" + ident;
      return s.get_html(url, access_code, function(html) {
        var xpress;
        console.log('sending ' + url + ' html to client');
        io.emit('markup', html, ident);
        xpress = "http://" + server + ":" + enCore_port + "/Xpress_client/menu.html";
        return s.get_html(xpress, access_code, function(html) {
          return io.emit('xpress', html);
        });
      });
    });
    return io.on('req_url', function(url) {
      console.log('\tclient requested page url ' + url);
      return s.get_html(url, access_code, function(html) {
        var end, ident, start, xpress;
        if (url.charAt(url.length - 1) === '/') {
          console.log('\tslash on end');
          end = url.length - 1;
        } else {
          end = url.length;
        }
        start = url.indexOf(":" + enCore_port) + enCore_port.length + 2;
        ident = url.substring(start, end);
        console.log('\tsending ident ' + ident + ' to client');
        io.emit('markup', html, ident);
        xpress = "http://" + server + ":" + enCore_port + "/Xpress_client/menu.html";
        return s.get_html(xpress, access_code, function(html) {
          return io.emit('xpress', html);
        });
      });
    });
  };
})(this);

app.listen(80, function(err) {
  var uid;
  if (err) {
    return cb(err);
  }
  uid = parseInt(process.env.SUDO_UID);
  if (uid) {
    process.setuid(uid);
  }
  return console.log("Server's UID is now " + process.getuid());
});
