// Generated by CoffeeScript 1.7.1
var close_telnet, handle_session, io, io_line, net, socket_io, socket_port;

net = require('net');

socket_io = require('socket.io');

socket_port = '8080';

io = socket_io.listen(socket_port);

io.sockets.on('connection', function(io) {
  console.log('Incoming socket.io connection\n');
  return io.on('init', (function(_this) {
    return function(param) {
      return handle_session(io, param);
    };
  })(this));
});

handle_session = (function(_this) {
  return function(io, param) {
    var telnet, telnet_port, telnet_server;
    telnet_server = param.server;
    telnet_port = param.port;
    telnet = net.createConnection(telnet_port, telnet_server);
    console.log('created telnet connection via ' + telnet_server + ":" + telnet_port);
    telnet.on('data', function(telnet_data) {
      return io.emit('tcp_line', telnet_data);
    });
    telnet.on('error', function() {
      return io.emit('err');
    });
    telnet.on('close', function() {
      return io.emit('disconnect');
    });
    io.on('io_line', function(socket_data) {
      return io_line(telnet, io, socket_data);
    });
    io.on('error', function() {
      return io.emit('err', 'timeout');
    });
    io.on('disconnect', function() {
      return close_telnet(telnet);
    });
    return io.on('close', function() {
      return close_telnet(telnet);
    });
  };
})(this);

io_line = (function(_this) {
  return function(telnet, io, socket_data) {
    if ((telnet != null) && telnet.writable) {
      return telnet.write(socket_data + "\r\n");
    } else {
      return io.emit('err');
    }
  };
})(this);

close_telnet = (function(_this) {
  return function(telnet) {
    console.log('close the telnet connection!\n');
    if (telnet != null) {
      telnet.destroy();
      return telnet = null;
    }
  };
})(this);
