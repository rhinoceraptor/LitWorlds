// Generated by CoffeeScript 1.7.1
var app, client_port, config, err, express, fs, handle_session, http, io, net, node_domain, obj, server, server_name, socket_io, socket_port, telnet_port;

net = require('net');

http = require('http');

socket_io = require('socket.io');

express = require('express');

http = require('http');

fs = require('fs');

config = fs.readFileSync('./config.json');

try {
  obj = JSON.parse(config);
  server_name = obj.server_name;
  socket_port = obj.socket_port;
  client_port = obj.client_port;
  node_domain = obj.node_domain;
  server = obj.server;
  telnet_port = obj.telnet_port;
  console.log('server configuration:\n---------------------');
  console.log('\tserver_name: ' + server_name);
  console.log('\tsocket_port: ' + socket_port);
  console.log('\tclient_port: ' + client_port);
  console.log('\tnode_domain: ' + node_domain);
  console.log('\tserver: ' + server);
  console.log('\ttelnet_port: ' + telnet_port);
} catch (_error) {
  err = _error;
  console.log('Error reading config.json!');
  process.exit(1);
}

app = express();

io = socket_io.listen(socket_port);

app.use('/', express["static"]('../client/'));

io.sockets.on('connection', (function(_this) {
  return function(io) {
    console.log('Incoming socket.io connection\n');
    return io.on('init', function(autologin) {
      return handle_session(io, autologin);
    });
  };
})(this));

handle_session = (function(_this) {
  return function(io, autologin) {
    var telnet;
    telnet = net.createConnection(telnet_port, server);
    if (autologin !== "" && autologin !== null) {
      telnet.write(autologin + "\r\n");
    }
    telnet.on('data', function(telnetData) {
      return io.emit('tcp_line', telnetData);
    }).on('error', function() {
      return io.emit('error');
    }).on('close', function() {
      return io.emit('disconnect');
    });
    io.on('io_line', function(socketData) {
      if (telnet != null) {
        if (telnet.writable) {
          return telnet.write(socketData + "\r\n");
        } else {
          return io.emit('error', 'timeout');
        }
      }
    }).on('error', function() {
      io.emit('error', 'timeout');
      return console.log('Error writing to telnet!');
    });
    io.on('disconnect', function() {
      console.log('disconnect the telnet connection!\n');
      if (telnet != null) {
        telnet.destroy();
        return telnet = null;
      }
    });
    return io.on('close', function() {
      console.log('close the telnet connection!\n');
      if (telnet != null) {
        telnet.destroy();
        return telnet = null;
      }
    });
  };
})(this);

app.listen(client_port, function(err) {
  if (err) {
    return console.log(err);
  }
});
