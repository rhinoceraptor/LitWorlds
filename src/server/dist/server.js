// Generated by CoffeeScript 1.7.1
var app, config, enCore_URL, err, express, fs, http, io, net, obj, server_name, socket_io, socket_port, telnet_host, telnet_port, telnet_server;

net = require('net');

http = require('http');

socket_io = require('socket.io');

express = require('express');

http = require('http');

fs = require('fs');

config = fs.readFileSync('./config.json');

try {
  obj = JSON.parse(config);
  server_name = obj.server_name;
  socket_port = obj.socket_port;
  telnet_server = obj.telnet_server;
  enCore_URL = obj.enCore_URL;
  console.log(server_name);
  console.log(socket_port);
  console.log(telnet_server);
  console.log(enCore_URL);
} catch (_error) {
  err = _error;
  console.log('Error reading config.json!');
  process.exit(1);
}

telnet_port = 7777;

telnet_host = 'literaryworlds.me';

socket_port = 8080;

app = express();

io = socket_io.listen(socket_port);

app.use('/', express["static"]('../client/'));

io.sockets.on('connection', (function(_this) {
  return function(io) {
    process.stdout.write('Incoming socket.io connection\n');
    io.on('auth', function(authData) {
      var passwd, user;
      user = authData.user;
      return passwd = authData.passwd;
    });
    return io.on('ready', function() {
      var telnet;
      process.stdout.write('connection is ready');
      telnet = net.createConnection(telnet_port, telnet_host);
      if ((typeof user !== "undefined" && user !== null) && (typeof passwd !== "undefined" && passwd !== null) && (telnet != null)) {
        if (telnet.writable) {
          telnet.write('CO ' + user + '\n');
          telnet.write(passwd + '\n');
          io.emit('authenticated');
        }
      }
      telnet.on('data', function(telnetData) {
        process.stdout.write('Recieved from server: ' + telnetData + '\n');
        process.stdout.write('emitting to client\n');
        return io.emit('tcp_line', telnetData);
      }).on('error', function() {
        return io.emit('error');
      }).on('close', function() {
        return io.emit('disconnect');
      });
      io.on('io_line', function(socketData) {
        process.stdout.write('Recieved from client:\n>>>' + socketData + '\n');
        if (telnet != null) {
          if (telnet.writable) {
            return telnet.write(socketData + "\n");
          } else {
            return io.emit('error', 'timeout');
          }
        }
      }).on('error', function() {
        return process.stdout.write('Error writing to telnet!');
      });
      io.on('disconnect', function() {
        process.stdout.write('disconnect the telnet connection!\n');
        if (telnet != null) {
          telnet.destroy();
          return telnet = null;
        }
      });
      return io.on('close', function() {
        process.stdout.write('close the telnet connection!\n');
        if (telnet != null) {
          telnet.destroy();
          return telnet = null;
        }
      });
    });
  };
})(this));

app.listen(80, function(err) {
  var uid;
  if (err) {
    return cb(err);
  }
  uid = parseInt(process.env.SUDO_UID);
  if (uid) {
    process.setuid(uid);
  }
  return console.log("Server's UID is now " + process.getuid());
});
