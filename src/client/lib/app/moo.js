// Generated by CoffeeScript 1.7.1
var arraybuf_to_string, clear_backlog, disconnect, error, input_handler, insert, scroll_backlog, server, set_height, set_line_buffer, user_output;

if (typeof server === "undefined" || server === null) {
  server = '127.0.0.1';
}

this.socket = io.connect(server + ":8080");

this.socket.on('connect', function() {
  return console.log('connected to socket');
});

this.socket.on('disconnect', this.disconnect);

this.socket.on('error', this.error);

this.socket.on('tcp_line', this.insert);

$(window).resize((function(_this) {
  return function() {
    return _this.set_height();
  };
})(this));

if ((typeof autologin !== "undefined" && autologin !== null)) {
  this.socket.emit('init', autologin);
}

set_height = (function(_this) {
  return function() {
    var frame_height;
    console.log("setting height");
    if (top.frames["java_frame"] != null) {
      frame_height = top.frames["java_frame"].innerHeight;
      return $("#text-mode-backlog").css({
        "height": "" + (frame_height - 35) + "px"
      });
    } else {
      console.log("hello");
      return $("#text-mode-backlog").css({
        "height": "calc(100% - 15px)"
      });
    }
  };
})(this);

this.set_height();

$("#text-mode-input").on("keydown", this.input_handler);

this.insert("\t                              _       \n" + "\t   ____ ___  ____  ____      (_)____  \n" + "\t  / __ `__ \\/ __ \\/ __ \\    / / ___/  \n" + "\t / / / / / / /_/ / /_/ /   / (__  )   \n" + "\t/_/ /_/ /_/\\____/\\____(_)_/ /____/    \n" + "\t                       /___/          \n" + "\t====================================\n" + "\tmoo.js version 0.0.1\n" + "\tFor license information, go to " + "Options --> Licenses.\n\tTo connect the MUD, use the " + "Login button or manually log in by pressing Connect.\n");

this.line_buf_length = 50;

this.scroll_buf_index = 0;

this.line_buf_index = 0;

this.line_buf = new Array();

insert = (function(_this) {
  return function(line) {
    var end, end_index, start, start_index, url;
    if (typeof line === "object") {
      line = _this.arraybuf_to_string(line);
    }
    start = "<http://";
    end = ">.";
    if (line.indexOf(start) > -1) {
      start_index = line.indexOf(start) + 1;
      end_index = line.indexOf(end);
      if (start_index > end_index) {
        end_index = line.lastIndexOf(end);
        url = line.substring(start_index, end_index);
        line = line.substring(0, start_index - 1);
      } else {
        url = line.substring(start_index, end_index);
        line = line.substring(line.indexOf(end) + 2, line.length);
      }
      if (top.frames["web_frame"] != null) {
        console.log("reload web_frame to " + url);
        top.frames["web_frame"].location = url;
      }
    }
    return _this.user_output(line);
  };
})(this);

user_output = (function(_this) {
  return function(line) {
    var $log_output;
    $log_output = $("#text-mode-backlog");
    if ($log_output.val() !== '') {
      $log_output.val($log_output.val() + line);
    } else {
      $log_output.val(line);
    }
    return _this.scroll_backlog();
  };
})(this);

input_handler = (function(_this) {
  return function(e) {
    var $text_input, index, input, last;
    $text_input = $("#text-mode-input");
    input = $text_input.val();
    if (e.ctrlKey && e.keyCode === 76) {
      e.preventDefault();
      return _this.clear_backlog();
    } else if (e.keyCode === 38) {
      if (_this.scroll_buf_index < _this.line_buf_index) {
        index = _this.line_buf_index - _this.scroll_buf_index - 1;
        $text_input.val(_this.line_buf[index]);
        if (_this.scroll_buf_index < _this.line_buf_index - 1) {
          return _this.scroll_buf_index++;
        }
      }
    } else if (e.keyCode === 40) {
      if (_this.scroll_buf_index > 0) {
        _this.scroll_buf_index--;
        index = _this.line_buf_index - _this.scroll_buf_index - 1;
        return $text_input.val(_this.line_buf[index]);
      } else {
        return $text_input.val("");
      }
    } else if (e.keyCode === 13) {
      e.preventDefault();
      if (input === "") {
        input = "\n";
      }
      if (_this.line_buf_index < _this.line_buf_length) {
        _this.line_buf.push(input);
        _this.line_buf_index++;
      }
      _this.socket.emit('io_line', input);
      $text_input.val("");
      _this.scroll_buf_index = 0;
      if (_this.line_buf.length > _this.line_buf_length) {
        _this.line_buf.reverse();
        last = _this.line_buf.pop();
        return _this.line_buf.reverse();
      }
    }
  };
})(this);

scroll_backlog = function() {
  var $log;
  $log = $("#text-mode-backlog");
  return $log.scrollTop($log[0].scrollHeight - $log.height());
};

clear_backlog = (function(_this) {
  return function() {
    var $log, height, newlines, num_newlines;
    $log = $("#text-mode-backlog");
    num_newlines = $log[0].value.split(/\r\n|\r|\n/).length;
    height = parseInt($log.height() / parseInt($log.css("line-height")));
    newlines = Array(height + 1).join("\n");
    return _this.insert(newlines);
  };
})(this);

set_line_buffer = (function(_this) {
  return function(length) {
    return _this.line_buf_length = length;
  };
})(this);

arraybuf_to_string = function(buf) {
  return String.fromCharCode.apply(null, new Uint8Array(buf));
};

error = function() {
  return this.user_output("\n\n\n\nAn error occured, please try reloading your browser.\n");
};

disconnect = function() {
  return this.user_output("\n\n\n\nYou have been disconnected from the MUD, please try reloading your browser.\n");
};
