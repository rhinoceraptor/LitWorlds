// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define([], function() {
  var moo;
  return moo = (function(_super) {
    __extends(moo, _super);

    function moo() {
      this.telnet_line_out = __bind(this.telnet_line_out, this);
      this.telnet_line_in = __bind(this.telnet_line_in, this);
      return moo.__super__.constructor.apply(this, arguments);
    }

    moo.prototype.el = ".main-body";

    moo.prototype.initialize = function() {
      this.socket = io.connect("http://127.0.0.1:8080" || location.host);
      this.socket.on('connect', function() {
        return console.log('connected to socket');
      });
      this.socket.on('disconnect', this.disconnect);
      this.socket.on('error', this.error);
      return this.socket.on('tcp_line', this.telnet_line_in);
    };

    moo.prototype.render = function(autologin) {
      console.log(autologin);
      return this.socket.emit('init', autologin);
    };

    moo.prototype.disconnect = function() {
      return App.Views.text_handler.disconnect();
    };

    moo.prototype.error = function() {
      return App.Views.text_handler.error();
    };

    moo.prototype.telnet_line_in = function(line) {
      return App.Views.text_handler.insert(line);
    };

    moo.prototype.telnet_line_out = function(line) {
      return this.socket.emit('io_line', line);
    };

    return moo;

  })(Backbone.View);
});
